/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef EKRAN1VIEWBASE_HPP
#define EKRAN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/ekran1_screen/ekran1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/scrollers/ScrollList.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/ctn_text.hpp>
#include <touchgfx/containers/scrollers/ScrollWheelWithSelectionStyle.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class ekran1ViewBase : public touchgfx::View<ekran1Presenter>
{
public:
    ekran1ViewBase();
    virtual ~ekran1ViewBase() {}
    virtual void setupScreen();

    virtual void scrollWheel1UpdateItem(ctn_text& item, int16_t itemIndex)
    {
        // Override and implement this function in ekran1
    }

    virtual void sw_minUpdateItem(ctn_text& item, int16_t itemIndex)
    {
        // Override and implement this function in ekran1
    }

    virtual void sw_maxUpdateItem(ctn_text& item, int16_t itemIndex)
    {
        // Override and implement this function in ekran1
    }

    /*
     * Virtual Action Handlers
     */
    virtual void LeftCrypto()
    {
        // Override and implement this function in ekran1
    }

    virtual void RightCrypto()
    {
        // Override and implement this function in ekran1
    }

    virtual void DownValueMin()
    {
        // Override and implement this function in ekran1
    }

    virtual void UpValueMin()
    {
        // Override and implement this function in ekran1
    }

    virtual void DownValueMax()
    {
        // Override and implement this function in ekran1
    }

    virtual void UpValueMax()
    {
        // Override and implement this function in ekran1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box kutu1;
    touchgfx::ScrollList scrollList1;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > textArea1;
    touchgfx::TextAreaWithOneWildcard textArea1_1;
    touchgfx::TextAreaWithOneWildcard textArea1_1_1;
    touchgfx::Box box1;
    touchgfx::Box box1_1;
    touchgfx::Box box1_1_1;
    touchgfx::Box box1_1_1_1;
    touchgfx::Box box1_1_1_1_1;
    touchgfx::Box box1_1_1_1_1_1;
    touchgfx::Box box1_1_1_1_1_1_1;
    touchgfx::Box box1_1_1_1_1_1_1_1;
    touchgfx::Box box1_1_1_1_1_1_1_1_1;
    touchgfx::Box box1_1_1_1_1_1_1_1_1_1;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea2_1;
    touchgfx::ScrollWheel scrollWheel1;
    touchgfx::DrawableListItems<ctn_text, 2> scrollWheel1ListItems;
    touchgfx::MoveAnimator< touchgfx::ScrollWheelWithSelectionStyle > sw_min;
    touchgfx::DrawableListItems<ctn_text, 2> sw_minListItems;
    touchgfx::MoveAnimator< touchgfx::ScrollWheelWithSelectionStyle > sw_max;
    touchgfx::DrawableListItems<ctn_text, 2> sw_maxListItems;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButton1;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButton2;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButton3;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButton4;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButton5;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger >  flexButton6;
    touchgfx::BoxProgress bp_1;
    touchgfx::BoxProgress bp_1_1;
    touchgfx::BoxProgress bp_1_2;
    touchgfx::BoxProgress bp_1_3;
    touchgfx::BoxProgress bp_1_4;
    touchgfx::BoxProgress bp_1_5;
    touchgfx::BoxProgress bp_1_6;
    touchgfx::BoxProgress bp_1_7;
    touchgfx::BoxProgress bp_1_8;
    touchgfx::BoxProgress bp_1_9;
    touchgfx::TextAreaWithOneWildcard ta_min;
    touchgfx::TextAreaWithOneWildcard ta_max;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];
    static const uint16_t TEXTAREA1_1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea1_1Buffer[TEXTAREA1_1_SIZE];
    static const uint16_t TEXTAREA1_1_1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea1_1_1Buffer[TEXTAREA1_1_1_SIZE];
    static const uint16_t TA_MIN_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ta_minBuffer[TA_MIN_SIZE];
    static const uint16_t TA_MAX_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ta_maxBuffer[TA_MAX_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ekran1ViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<ekran1ViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // EKRAN1VIEWBASE_HPP
